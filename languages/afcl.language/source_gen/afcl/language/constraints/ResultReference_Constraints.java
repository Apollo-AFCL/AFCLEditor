package afcl.language.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.scope.ListScope;
import afcl.language.behavior.IResultScope__BehaviorDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class ResultReference_Constraints extends BaseConstraintsDescriptor {
  public ResultReference_Constraints() {
    super(CONCEPTS.ResultReference$W0);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.scope$dMae, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_ni6vle_a0a0a0a0a1a0a0a0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            Iterable<SNode> resultScopes = SNodeOperations.ofConcept(SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.Workflow$Xx, true, false), LINKS.functions$Uhxu), LINKS.functions$Wt2U), CONCEPTS.IResultScope$Aw);
            return ListScope.forNamedElements(resultScopes);
          }
        };
      }
    };
    BaseReferenceConstraintsDescriptor d1 = new BaseReferenceConstraintsDescriptor(LINKS.resultReference$dMpf, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_ni6vle_a0a0a0a0a1a0a0b0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            return ListScope.forNamedElements(IResultScope__BehaviorDescriptor.getResultsInScope_id391VEBGE8hm.invoke(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.ResultReference$W0, true, false), LINKS.scope$dMae)));
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    references.put(d1.getReference(), d1);
    return references;
  }
  private static final SNodePointer breakingNode_ni6vle_a0a0a0a0a1a0a0a0c = new SNodePointer("r:5aa32054-81f8-4f20-9709-52966b0ebe9a(afcl.language.constraints)", "3621437988972440806");
  private static final SNodePointer breakingNode_ni6vle_a0a0a0a0a1a0a0b0c = new SNodePointer("r:5aa32054-81f8-4f20-9709-52966b0ebe9a(afcl.language.constraints)", "3621437988972447360");

  private static final class CONCEPTS {
    /*package*/ static final SConcept ResultReference$W0 = MetaAdapterFactory.getConcept(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce9b4eL, "afcl.language.structure.ResultReference");
    /*package*/ static final SConcept Workflow$Xx = MetaAdapterFactory.getConcept(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2596L, "afcl.language.structure.Workflow");
    /*package*/ static final SInterfaceConcept IResultScope$Aw = MetaAdapterFactory.getInterfaceConcept(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce78cdL, "afcl.language.structure.IResultScope");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink scope$dMae = MetaAdapterFactory.getReferenceLink(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce9b4eL, 0x3241eea9ecce9b4fL, "scope");
    /*package*/ static final SContainmentLink functions$Uhxu = MetaAdapterFactory.getContainmentLink(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2596L, 0x658fbcf6b68e2cdfL, "functions");
    /*package*/ static final SContainmentLink functions$Wt2U = MetaAdapterFactory.getContainmentLink(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2599L, 0x3365a85a337bbac0L, "functions");
    /*package*/ static final SReferenceLink resultReference$dMpf = MetaAdapterFactory.getReferenceLink(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce9b4eL, 0x3241eea9ecce9b50L, "resultReference");
  }
}
