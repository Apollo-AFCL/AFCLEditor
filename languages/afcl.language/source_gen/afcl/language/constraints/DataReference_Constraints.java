package afcl.language.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.scope.ListScope;
import afcl.language.behavior.IDataScope__BehaviorDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class DataReference_Constraints extends BaseConstraintsDescriptor {
  public DataReference_Constraints() {
    super(CONCEPTS.DataReference$Du);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.scope$NCTe, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_xreugs_a0a0a0a0a1a0a0a0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            final SNode variableContext = SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.IDataScope$NY, true, false);
            Iterable<SNode> functionScopes = Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.Workflow$Xx, true, false), LINKS.functions$Uhxu), LINKS.functions$Wt2U), CONCEPTS.IDataScope$NY)).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SNodeOperations.getIndexInParent(it) < SNodeOperations.getIndexInParent(variableContext);
              }
            });
            Iterable<SNode> rootScope = Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getNodeAncestors(_context.getContextNode(), null, false), CONCEPTS.IDataScope$NY)).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SNodeOperations.getIndexInParent(it) < SNodeOperations.getIndexInParent(variableContext);
              }
            });
            Scope b = ListScope.forNamedElements(Sequence.fromIterable(functionScopes).concat(Sequence.fromIterable(rootScope)));
            return b;
          }
        };
      }
    };
    BaseReferenceConstraintsDescriptor d1 = new BaseReferenceConstraintsDescriptor(LINKS.dataReference$XYuK, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_xreugs_a0a0a0a0a1a0a0b0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            return ListScope.forNamedElements(IDataScope__BehaviorDescriptor.getVariablesInScope_id391VEBGNgxp.invoke(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.DataReference$Du, true, false), LINKS.scope$NCTe)));
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    references.put(d1.getReference(), d1);
    return references;
  }
  private static final SNodePointer breakingNode_xreugs_a0a0a0a0a1a0a0a0c = new SNodePointer("r:5aa32054-81f8-4f20-9709-52966b0ebe9a(afcl.language.constraints)", "3621437988968864811");
  private static final SNodePointer breakingNode_xreugs_a0a0a0a0a1a0a0b0c = new SNodePointer("r:5aa32054-81f8-4f20-9709-52966b0ebe9a(afcl.language.constraints)", "3621437988969493611");

  private static final class CONCEPTS {
    /*package*/ static final SConcept DataReference$Du = MetaAdapterFactory.getConcept(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a3399c631L, "afcl.language.structure.DataReference");
    /*package*/ static final SInterfaceConcept IDataScope$NY = MetaAdapterFactory.getInterfaceConcept(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9eccbb596L, "afcl.language.structure.IDataScope");
    /*package*/ static final SConcept Workflow$Xx = MetaAdapterFactory.getConcept(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2596L, "afcl.language.structure.Workflow");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink scope$NCTe = MetaAdapterFactory.getReferenceLink(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a3399c631L, 0x3365a85a3399c632L, "scope");
    /*package*/ static final SContainmentLink functions$Uhxu = MetaAdapterFactory.getContainmentLink(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2596L, 0x658fbcf6b68e2cdfL, "functions");
    /*package*/ static final SContainmentLink functions$Wt2U = MetaAdapterFactory.getContainmentLink(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2599L, 0x3365a85a337bbac0L, "functions");
    /*package*/ static final SReferenceLink dataReference$XYuK = MetaAdapterFactory.getReferenceLink(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a3399c631L, 0x3241eea9ec84776dL, "dataReference");
  }
}
