package afcl.language.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new Data_Constraints();
      case 1:
        return new DataReference_Constraints();
      case 2:
        return new FunctionBlock_Constraints();
      case 3:
        return new NumberLiteral_Constraints();
      case 4:
        return new ResultReference_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db8L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a3399c631L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2599L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a33628a45L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce9b4eL)).seal();
}
