package afcl.language.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBooleanLiteral = createDescriptorForBooleanLiteral();
  /*package*/ final ConceptDescriptor myConceptBooleanType = createDescriptorForBooleanType();
  /*package*/ final ConceptDescriptor myConceptData = createDescriptorForData();
  /*package*/ final ConceptDescriptor myConceptDataInput = createDescriptorForDataInput();
  /*package*/ final ConceptDescriptor myConceptDataOutput = createDescriptorForDataOutput();
  /*package*/ final ConceptDescriptor myConceptDataReference = createDescriptorForDataReference();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptFunction = createDescriptorForFunction();
  /*package*/ final ConceptDescriptor myConceptFunctionBlock = createDescriptorForFunctionBlock();
  /*package*/ final ConceptDescriptor myConceptFunctionType = createDescriptorForFunctionType();
  /*package*/ final ConceptDescriptor myConceptIDataScope = createDescriptorForIDataScope();
  /*package*/ final ConceptDescriptor myConceptIResultScope = createDescriptorForIResultScope();
  /*package*/ final ConceptDescriptor myConceptInputBlock = createDescriptorForInputBlock();
  /*package*/ final ConceptDescriptor myConceptLiteral = createDescriptorForLiteral();
  /*package*/ final ConceptDescriptor myConceptNumberLiteral = createDescriptorForNumberLiteral();
  /*package*/ final ConceptDescriptor myConceptNumberType = createDescriptorForNumberType();
  /*package*/ final ConceptDescriptor myConceptOutputBlock = createDescriptorForOutputBlock();
  /*package*/ final ConceptDescriptor myConceptResultBlock = createDescriptorForResultBlock();
  /*package*/ final ConceptDescriptor myConceptResultReference = createDescriptorForResultReference();
  /*package*/ final ConceptDescriptor myConceptStringLiteral = createDescriptorForStringLiteral();
  /*package*/ final ConceptDescriptor myConceptStringType = createDescriptorForStringType();
  /*package*/ final ConceptDescriptor myConceptType = createDescriptorForType();
  /*package*/ final ConceptDescriptor myConceptWorkflow = createDescriptorForWorkflow();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBooleanLiteral, myConceptBooleanType, myConceptData, myConceptDataInput, myConceptDataOutput, myConceptDataReference, myConceptExpression, myConceptFunction, myConceptFunctionBlock, myConceptFunctionType, myConceptIDataScope, myConceptIResultScope, myConceptInputBlock, myConceptLiteral, myConceptNumberLiteral, myConceptNumberType, myConceptOutputBlock, myConceptResultBlock, myConceptResultReference, myConceptStringLiteral, myConceptStringType, myConceptType, myConceptWorkflow);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.BooleanLiteral:
        return myConceptBooleanLiteral;
      case LanguageConceptSwitch.BooleanType:
        return myConceptBooleanType;
      case LanguageConceptSwitch.Data:
        return myConceptData;
      case LanguageConceptSwitch.DataInput:
        return myConceptDataInput;
      case LanguageConceptSwitch.DataOutput:
        return myConceptDataOutput;
      case LanguageConceptSwitch.DataReference:
        return myConceptDataReference;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.Function:
        return myConceptFunction;
      case LanguageConceptSwitch.FunctionBlock:
        return myConceptFunctionBlock;
      case LanguageConceptSwitch.FunctionType:
        return myConceptFunctionType;
      case LanguageConceptSwitch.IDataScope:
        return myConceptIDataScope;
      case LanguageConceptSwitch.IResultScope:
        return myConceptIResultScope;
      case LanguageConceptSwitch.InputBlock:
        return myConceptInputBlock;
      case LanguageConceptSwitch.Literal:
        return myConceptLiteral;
      case LanguageConceptSwitch.NumberLiteral:
        return myConceptNumberLiteral;
      case LanguageConceptSwitch.NumberType:
        return myConceptNumberType;
      case LanguageConceptSwitch.OutputBlock:
        return myConceptOutputBlock;
      case LanguageConceptSwitch.ResultBlock:
        return myConceptResultBlock;
      case LanguageConceptSwitch.ResultReference:
        return myConceptResultReference;
      case LanguageConceptSwitch.StringLiteral:
        return myConceptStringLiteral;
      case LanguageConceptSwitch.StringType:
        return myConceptStringType;
      case LanguageConceptSwitch.Type:
        return myConceptType;
      case LanguageConceptSwitch.Workflow:
        return myConceptWorkflow;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForBooleanLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "BooleanLiteral", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a33628a46L);
    b.class_(false, false, false);
    b.super_("afcl.language.structure.Literal", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x4efaa73284e036beL);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373944719942");
    b.version(2);
    b.property("value", 0x3365a85a33628a47L).type(PrimitiveTypeId.BOOLEAN).origin("3703551373944719943").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "BooleanType", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed389L);
    b.class_(false, false, false);
    b.super_("afcl.language.structure.Type", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed37bL);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373944476553");
    b.version(2);
    b.alias("Boolean");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForData() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "Data", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db8L);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373945568696");
    b.version(2);
    b.aggregate("value", 0x3365a85a336f7dd9L).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed381L).optional(true).ordered(true).multiple(false).origin("3703551373945568729").done();
    b.aggregate("type", 0x3365a85a336f7ddaL).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed37bL).optional(true).ordered(true).multiple(false).origin("3703551373948628377").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDataInput() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "DataInput", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2598L);
    b.class_(false, false, false);
    b.super_("afcl.language.structure.Data", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db8L);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/7318275687311091096");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDataOutput() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "DataOutput", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db7L);
    b.class_(false, false, false);
    b.super_("afcl.language.structure.Data", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db8L);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373945568695");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDataReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "DataReference", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a3399c631L);
    b.class_(false, false, false);
    b.super_("afcl.language.structure.Expression", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed381L);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373948339761");
    b.version(2);
    b.associate("scope", 0x3365a85a3399c632L).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9eccbb596L).optional(false).origin("3703551373948339762").done();
    b.associate("dataReference", 0x3241eea9ec84776dL).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db8L).optional(false).origin("3621437988967577453").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "Expression", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed381L);
    b.class_(false, true, false);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373944476545");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "Function", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a337bbaa5L);
    b.class_(false, false, false);
    b.parent(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9eccbb596L);
    b.parent(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce78cdL);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373946370725");
    b.version(2);
    b.aggregate("type", 0x3365a85a337bbab7L).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a337bbab1L).optional(false).ordered(true).multiple(false).origin("3703551373946370743").done();
    b.aggregate("dataIns", 0x3241eea9ecaa016fL).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2597L).optional(false).ordered(true).multiple(false).origin("3621437988970037615").done();
    b.aggregate("dataOuts", 0x3241eea9ecaa0170L).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db4L).optional(false).ordered(true).multiple(false).origin("3621437988970037616").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunctionBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "FunctionBlock", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2599L);
    b.class_(false, false, false);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/7318275687311091097");
    b.version(2);
    b.aggregate("functions", 0x3365a85a337bbac0L).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a337bbaa5L).optional(true).ordered(true).multiple(true).origin("3703551373946370752").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunctionType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "FunctionType", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a337bbab1L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373946370737");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIDataScope() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "IDataScope", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9eccbb596L);
    b.interface_();
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3621437988972246422");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIResultScope() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "IResultScope", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce78cdL);
    b.interface_();
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3621437988972427469");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInputBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "InputBlock", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2597L);
    b.class_(false, false, false);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/7318275687311091095");
    b.version(2);
    b.aggregate("inputs", 0x658fbcf6b68e4f1cL).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2598L).optional(true).ordered(true).multiple(true).origin("7318275687311101724").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "Literal", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x4efaa73284e036beL);
    b.class_(false, true, false);
    b.super_("afcl.language.structure.Expression", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed381L);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/5691044914555532990");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNumberLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "NumberLiteral", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a33628a45L);
    b.class_(false, false, false);
    b.super_("afcl.language.structure.Literal", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x4efaa73284e036beL);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373944719941");
    b.version(2);
    b.property("value", 0x3365a85a33628a49L).type(PrimitiveTypeId.STRING).origin("3703551373944719945").done();
    b.alias("Number");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNumberType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "NumberType", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed38dL);
    b.class_(false, false, false);
    b.super_("afcl.language.structure.Type", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed37bL);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373944476557");
    b.version(2);
    b.alias("Number");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOutputBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "OutputBlock", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db4L);
    b.class_(false, false, false);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373945568692");
    b.version(2);
    b.aggregate("outputs", 0x3365a85a336f7db5L).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db7L).optional(true).ordered(true).multiple(true).origin("3703551373945568693").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForResultBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "ResultBlock", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecd09e1eL);
    b.class_(false, false, false);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3621437988972568094");
    b.version(2);
    b.aggregate("results", 0x3241eea9ecd09e21L).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce9b4eL).optional(true).ordered(true).multiple(true).origin("3621437988972568097").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForResultReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "ResultReference", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce9b4eL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3621437988972436302");
    b.version(2);
    b.associate("scope", 0x3241eea9ecce9b4fL).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce78cdL).optional(false).origin("3621437988972436303").done();
    b.associate("resultReference", 0x3241eea9ecce9b50L).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db8L).optional(false).origin("3621437988972436304").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "StringLiteral", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a33628a44L);
    b.class_(false, false, false);
    b.super_("afcl.language.structure.Literal", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x4efaa73284e036beL);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373944719940");
    b.version(2);
    b.property("value", 0x3365a85a33628a4bL).type(PrimitiveTypeId.STRING).origin("3703551373944719947").done();
    b.alias("\"");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "StringType", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed38cL);
    b.class_(false, false, false);
    b.super_("afcl.language.structure.Type", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed37bL);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373944476556");
    b.version(2);
    b.alias("String");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "Type", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed37bL);
    b.class_(false, true, false);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/3703551373944476539");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWorkflow() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("afcl.language", "Workflow", 0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2596L);
    b.class_(false, false, true);
    b.parent(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9eccbb596L);
    b.origin("r:a0fddbfa-0913-46a0-b0ed-332b3a514e9d(afcl.language.structure)/7318275687311091094");
    b.version(2);
    b.aggregate("functions", 0x658fbcf6b68e2cdfL).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2599L).optional(false).ordered(true).multiple(false).origin("7318275687311092959").done();
    b.aggregate("dataIn", 0x3365a85a337bbab9L).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2597L).optional(false).ordered(true).multiple(false).origin("3703551373946370745").done();
    b.aggregate("dataOut", 0x3365a85a337bbabcL).target(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecd09e1eL).optional(false).ordered(true).multiple(false).origin("3703551373946370748").done();
    return b.create();
  }
}
