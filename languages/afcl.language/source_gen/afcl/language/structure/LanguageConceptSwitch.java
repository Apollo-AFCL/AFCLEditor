package afcl.language.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int BooleanLiteral = 0;
  public static final int BooleanType = 1;
  public static final int Data = 2;
  public static final int DataInput = 3;
  public static final int DataOutput = 4;
  public static final int DataReference = 5;
  public static final int Expression = 6;
  public static final int Function = 7;
  public static final int FunctionBlock = 8;
  public static final int FunctionType = 9;
  public static final int IDataScope = 10;
  public static final int IResultScope = 11;
  public static final int InputBlock = 12;
  public static final int Literal = 13;
  public static final int NumberLiteral = 14;
  public static final int NumberType = 15;
  public static final int OutputBlock = 16;
  public static final int ResultBlock = 17;
  public static final int ResultReference = 18;
  public static final int StringLiteral = 19;
  public static final int StringType = 20;
  public static final int Type = 21;
  public static final int Workflow = 22;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xec3060ee1f234e47L, 0xaf803618736238b3L);
    builder.put(0x3365a85a33628a46L, BooleanLiteral);
    builder.put(0x3365a85a335ed389L, BooleanType);
    builder.put(0x3365a85a336f7db8L, Data);
    builder.put(0x658fbcf6b68e2598L, DataInput);
    builder.put(0x3365a85a336f7db7L, DataOutput);
    builder.put(0x3365a85a3399c631L, DataReference);
    builder.put(0x3365a85a335ed381L, Expression);
    builder.put(0x3365a85a337bbaa5L, Function);
    builder.put(0x658fbcf6b68e2599L, FunctionBlock);
    builder.put(0x3365a85a337bbab1L, FunctionType);
    builder.put(0x3241eea9eccbb596L, IDataScope);
    builder.put(0x3241eea9ecce78cdL, IResultScope);
    builder.put(0x658fbcf6b68e2597L, InputBlock);
    builder.put(0x4efaa73284e036beL, Literal);
    builder.put(0x3365a85a33628a45L, NumberLiteral);
    builder.put(0x3365a85a335ed38dL, NumberType);
    builder.put(0x3365a85a336f7db4L, OutputBlock);
    builder.put(0x3241eea9ecd09e1eL, ResultBlock);
    builder.put(0x3241eea9ecce9b4eL, ResultReference);
    builder.put(0x3365a85a33628a44L, StringLiteral);
    builder.put(0x3365a85a335ed38cL, StringType);
    builder.put(0x3365a85a335ed37bL, Type);
    builder.put(0x658fbcf6b68e2596L, Workflow);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
