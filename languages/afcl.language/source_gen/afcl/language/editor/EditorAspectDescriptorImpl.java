package afcl.language.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BooleanLiteral_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new DataInput_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new DataOutput_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DataReference_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Function_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new FunctionBlock_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new FunctionType_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new InputBlock_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new NumberLiteral_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new OutputBlock_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new ResultBlock_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new ResultReference_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new StringLiteral_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new Type_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Workflow_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        if (true) {
          if ("afcl.language.editor.DummyForGrammarCells".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new DummyForGrammarCells());
          }
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new template_GrammarCellsSideTransformationsMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Arrays.asList(new SubstituteMenu[]{new BooleanLiteral_SubstituteMenu(), new GrammarCellsSubstituteMenu_BooleanLiteral()});
      case 1:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_BooleanType());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Data());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DataInput());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DataOutput());
      case 5:
        return Arrays.asList(new SubstituteMenu[]{new DataReference_SubstituteMenu(), new GrammarCellsSubstituteMenu_DataReference()});
      case 6:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Expression());
      case 7:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Function());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_FunctionBlock());
      case 9:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_FunctionType());
      case 10:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IDataScope());
      case 11:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_IResultScope());
      case 12:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_InputBlock());
      case 13:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Literal());
      case 14:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_NumberLiteral());
      case 15:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_NumberType());
      case 16:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_OutputBlock());
      case 17:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ResultBlock());
      case 18:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ResultReference());
      case 19:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_StringLiteral(), new StringLiteral_SubstituteMenu()});
      case 20:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_StringType());
      case 21:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Type());
      case 22:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Workflow());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a33628a46L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2598L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db7L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a3399c631L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a337bbaa5L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2599L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a337bbab1L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2597L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a33628a45L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db4L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecd09e1eL), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce9b4eL), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a33628a44L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed37bL), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2596L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a33628a46L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed389L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db8L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2598L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db7L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a3399c631L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed381L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a337bbaa5L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2599L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a337bbab1L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9eccbb596L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce78cdL), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2597L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x4efaa73284e036beL), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a33628a45L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed38dL), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a336f7db4L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecd09e1eL), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3241eea9ecce9b4eL), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a33628a44L), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed38cL), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x3365a85a335ed37bL), MetaIdFactory.conceptId(0xec3060ee1f234e47L, 0xaf803618736238b3L, 0x658fbcf6b68e2596L)).seal();
}
